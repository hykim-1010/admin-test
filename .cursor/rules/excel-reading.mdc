---
alwaysApply: true
description: Excel 파일 읽기 표준 룰 - 오류 방지 및 일관된 방법
---

# Excel 파일 읽기 표준 룰

## 🎯 목적
Excel 파일을 읽을 때마다 발생하는 오류를 방지하고, 일관된 방법으로 파일을 읽기 위한 표준 룰입니다.

## ❌ 절대 사용하지 말 것

### 1. PowerShell에서 한 줄 Python 명령어 실행
```bash
# ❌ 잘못된 방법 - 절대 사용 금지
python -c "import pandas as pd; df = pd.read_excel('파일.xlsx'); print(df)"
```
**문제점:**
- 따옴표 이스케이프 오류
- 명령어가 너무 길어서 파싱 오류
- 디버깅 정보 부족

### 2. PowerShell 문법 오류
```bash
# ❌ 잘못된 방법
del file.csv && move new_file.csv file.csv

# ✅ 올바른 방법
del file.csv; move new_file.csv file.csv
```

## ✅ 반드시 사용할 방법

### Rule 1: 항상 Python 스크립트 파일 사용
Excel 파일을 읽을 때는 반드시 Python 스크립트 파일을 생성하여 사용합니다.

**표준 템플릿:** [read_excel_standard.py](mdc:read_excel_standard.py)
```python
import pandas as pd
import sys
import os

def read_excel_rows(file_name, start_row, end_row):
    try:
        print(f"파일 경로: {os.path.abspath(file_name)}")
        print(f"파일 존재 여부: {os.path.exists(file_name)}")
        
        df = pd.read_excel(file_name, header=None, engine='openpyxl')
        print(f"=== {file_name} 읽기 성공 ===")
        print(f"전체 행 수: {len(df)}, 전체 열 수: {len(df.columns)}")
        print()
        
        for i in range(start_row-1, min(end_row, len(df))):
            row_data = df.iloc[i].fillna('').astype(str).tolist()
            print(f"행 {i+1}: {row_data}")
            print()
            
    except Exception as e:
        print(f"❌ 오류: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    read_excel_rows('파일명.xlsx', 시작행, 끝행)
```

### Rule 2: 실행 순서
```bash
# 1단계: 의존성 확인 (필수)
python -c "import pandas, openpyxl; print('라이브러리 설치 완료')"

# 2단계: 스크립트 실행
python read_excel_standard.py
```

### Rule 3: 오류 발생 시 체크리스트
1. **파일 존재 여부 확인**
   ```bash
   dir 파일명.xlsx
   ```

2. **라이브러리 설치 상태 확인**
   ```bash
   python -c "import pandas, openpyxl; print('라이브러리 설치 완료')"
   ```

3. **파일 경로 정확성 확인**
   - 상대 경로 vs 절대 경로
   - 현재 디렉토리 확인

4. **상세한 오류 메시지 확인**
   - traceback 정보 포함
   - 파일 경로 및 존재 여부 출력

## 🔧 표준 템플릿 사용법

### 1. 기본 사용법
```python
# read_excel_standard.py 파일을 생성하고
# 파일명과 행 범위만 수정하여 사용

if __name__ == "__main__":
    read_excel_rows('파일명.xlsx', 시작행, 끝행)
```

### 2. 특정 시트 읽기
```python
# 특정 시트를 읽으려면
df = pd.read_excel(file_name, header=None, engine='openpyxl', sheet_name='시트명')
```

### 3. 헤더가 있는 경우
```python
# 헤더가 있는 경우
df = pd.read_excel(file_name, header=0, engine='openpyxl')
```

## 📋 필수 체크리스트

Excel 파일을 읽기 전에 다음을 반드시 확인하세요:

- [ ] Python이 설치되어 있는가?
- [ ] pandas와 openpyxl 라이브러리가 설치되어 있는가?
- [ ] Excel 파일이 현재 디렉토리에 존재하는가?
- [ ] 파일명에 한글이나 특수문자가 있는가?
- [ ] 파일이 다른 프로그램에서 열려있지 않은가?

## 🚨 주의사항

1. **한글 파일명**: 한글 파일명은 문제없이 처리됩니다.
2. **파일 경로**: 상대 경로를 사용할 때는 현재 디렉토리를 확인하세요.
3. **파일 잠금**: Excel 파일이 다른 프로그램에서 열려있으면 읽을 수 없습니다.
4. **메모리 사용량**: 큰 Excel 파일의 경우 메모리 사용량을 고려하세요.

## 📝 성공/실패 예시

### ✅ 성공 사례
```
파일 경로: C:\Users\uber\test_adminDoc_250912\기능정의서_test_250916.xlsx
파일 존재 여부: True
=== 기능정의서_test_250916.xlsx 읽기 성공 ===
전체 행 수: 31, 전체 열 수: 8

행 3: ['', '로그인', '1차', '', '', '', '- 아이디, 비밀번호...', '']
행 4: ['', '', '2차', '', '', '', '- 2차: 이메일 텍스트...', '']
```

### ❌ 실패 사례
```
❌ 오류: [Errno 2] No such file or directory: '파일명.xlsx'
파일 경로: C:\Users\uber\test_adminDoc_250912\파일명.xlsx
파일 존재 여부: False
```

## 🎯 핵심 원칙

1. **절대 한 줄 명령어 사용 금지** - 반드시 Python 스크립트 파일 사용
2. **의존성 사전 확인** - pandas, openpyxl 라이브러리 설치 상태 확인
3. **디버깅 정보 포함** - 파일 경로, 존재 여부, 상세 오류 정보 출력
4. **표준 템플릿 사용** - [read_excel_standard.py](mdc:read_excel_standard.py) 템플릿 활용
5. **오류 처리 강화** - try-catch와 traceback으로 상세한 오류 정보 제공

**이 룰을 따라하면 Excel 파일 읽기 오류를 99% 방지할 수 있습니다!**